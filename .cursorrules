# Cursor Rules pour Console Qovery

## Architecture et Structure du Projet

Ce projet utilise:

- **Nx monorepo** avec apps/ et libs/
- **React 18** avec TypeScript
- **TailwindCSS** pour le styling
- **React Query** pour la gestion d'état
- **Jest** pour les tests
- **ESLint** avec des règles strictes

## Règles de Développement

### 1. Structure des Imports

- Utilisez TOUJOURS les imports de type avec la syntaxe inline: `import { type MyType, myFunction } from './module'`
- Respectez l'ordre des imports selon `.eslintrc.json`
- Utilisez les alias `@qovery/*` définis dans `tsconfig.base.json`
- NE PAS importer directement depuis `react` (destructurez React)
- Utilisez `@qovery/shared/util-tests` au lieu de `@testing-library/react`

### 2. Composants React

- Composants fonctionnels uniquement
- Pas de `React.FC` explicite
- Destructurez les props directement dans les paramètres
- Utilisez `clsx` ou `twMerge` depuis `@qovery/shared/util-js` pour les classes conditionnelles
- Préférez les composants Radix UI quand disponibles

### 3. Gestion d'État

- Utilisez React Query pour les appels API
- Suivez les patterns de `@qovery/state/util-queries`
- Utilisez les factories depuis `@qovery/shared/factories` pour les données mock

### 4. Tests

- Utilisez `renderWithProviders` depuis `@qovery/shared/util-tests`
- Préférez `userEvent` à `fireEvent`
- Tests unitaires obligatoires pour la logique métier
- Snapshots pour les composants UI complexes

### 5. Styling

- TailwindCSS uniquement (pas de CSS modules ou styled-components dans le nouveau code)
- Utilisez les utilitaires de `@qovery/shared/ui` quand disponibles
- Responsive design mobile-first

## Vérifications Pre-commit

Avant chaque commit, les vérifications suivantes DOIVENT être effectuées automatiquement:

### Scripts à exécuter:

1. **Format check**: `npx nx format:check`
2. **Tests**: `yarn test` (ou `npx nx run-many --all --target=test --parallel`)
3. **Lint**: `npx nx run-many --all --target=lint --parallel`
4. **Snapshots**: Vérifiez s'il y a des snapshots à mettre à jour avec `git status`

### Workflow Pre-commit:

```bash
# 1. Vérification du formatting
npx nx format:check
if [ $? -ne 0 ]; then
  echo "❌ Format check failed. Run 'npx nx format:write' to fix."
  exit 1
fi

# 2. Vérification des tests
yarn test --passWithNoTests
if [ $? -ne 0 ]; then
  echo "❌ Tests failed. Fix failing tests before committing."
  exit 1
fi

# 3. Vérification des snapshots
git diff --name-only --cached | grep -E '\.snap$'
if [ $? -eq 0 ]; then
  echo "⚠️  Snapshot files detected. Review changes carefully."
  echo "Updated snapshots:"
  git diff --name-only --cached | grep -E '\.snap$'
fi

# 4. Lint check
npx nx run-many --all --target=lint --parallel
if [ $? -ne 0 ]; then
  echo "❌ Lint failed. Fix linting errors before committing."
  exit 1
fi
```

## Conventions de Code

### Nommage

- **Composants**: PascalCase (`UserProfile.tsx`)
- **Hooks**: camelCase avec préfixe `use` (`useUserData.ts`)
- **Utilitaires**: camelCase (`formatDate.ts`)
- **Types/Interfaces**: PascalCase avec préfixe `I` pour interfaces si nécessaire
- **Enums**: PascalCase
- **Constants**: UPPER_SNAKE_CASE

### Organisation des Fichiers

```
libs/
├── domains/           # Logique métier par domaine
├── pages/            # Pages/routes de l'application
├── shared/           # Code partagé
│   ├── ui/          # Composants UI réutilisables
│   ├── util-*/      # Utilitaires spécialisés
│   └── interfaces/  # Types partagés
```

### Commentaires

- Évitez les commentaires sauf si absolument nécessaire
- Commentaires en anglais uniquement
- Préférez du code auto-documenté avec des noms explicites

## Bonnes Pratiques

### Performance

- Utilisez `React.memo()` pour les composants coûteux
- `useCallback` et `useMemo` seulement quand nécessaire
- Lazy loading pour les pages avec `React.lazy()`

### Accessibilité

- Respectez les règles `jsx-a11y`
- Utilisez les composants Radix UI qui incluent l'accessibilité
- Testez avec les lecteurs d'écran

### Sécurité

- Validez toujours les données utilisateur
- Utilisez les types TypeScript stricts
- Pas de `any` sauf cas exceptionnels documentés

### API

- Utilisez les hooks React Query
- Gestion d'erreur centralisée
- Types générés depuis l'API (`qovery-typescript-axios`)

## Outils et Configuration

- **Node.js**: Version définie dans `.nvmrc` (si présent)
- **Package Manager**: Yarn (lockfile présent)
- **IDE**: Configurations ESLint et Prettier intégrées
- **Git**: Conventional commits recommandés

## Commandes Utiles

```bash
# Développement
yarn start                    # Démarre l'app console
yarn storybook               # Démarre Storybook

# Tests et Qualité
yarn test                    # Lance tous les tests
npx nx format:write          # Formate le code
npx nx run-many --all --target=lint --parallel  # Lint

# Build
yarn build                   # Build de production
```

## Notes Importantes

- Respectez l'architecture Nx (pas d'imports circulaires)
- Utilisez les générateurs Nx pour créer de nouveaux composants/libs
- Les libs `data-access` contiennent la logique d'API
- Les libs `feature` contiennent les composants métier
- Les libs `ui` contiennent les composants réutilisables
